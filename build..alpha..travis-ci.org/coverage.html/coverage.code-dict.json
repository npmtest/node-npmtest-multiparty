{"/home/travis/build/npmtest/node-npmtest-multiparty/test.js":"/* istanbul instrument in package npmtest_multiparty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multiparty/lib.npmtest_multiparty.js":"/* istanbul instrument in package npmtest_multiparty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_multiparty = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_multiparty = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-multiparty/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-multiparty && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_multiparty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_multiparty\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_multiparty.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_multiparty.rollup.js'] =\n            local.assetsDict['/assets.npmtest_multiparty.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_multiparty.__dirname +\n                    '/lib.npmtest_multiparty.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multiparty/node_modules/multiparty/index.js":"var stream = require('stream');\nvar util = require('util');\nvar fs = require('fs');\nvar crypto = require('crypto');\nvar path = require('path');\nvar os = require('os');\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar fdSlicer = require('fd-slicer');\n\nvar START = 0;\nvar START_BOUNDARY = 1;\nvar HEADER_FIELD_START = 2;\nvar HEADER_FIELD = 3;\nvar HEADER_VALUE_START = 4;\nvar HEADER_VALUE = 5;\nvar HEADER_VALUE_ALMOST_DONE = 6;\nvar HEADERS_ALMOST_DONE = 7;\nvar PART_DATA_START = 8;\nvar PART_DATA = 9;\nvar PART_END = 10;\nvar CLOSE_BOUNDARY = 11;\nvar END = 12;\n\nvar LF = 10;\nvar CR = 13;\nvar SPACE = 32;\nvar HYPHEN = 45;\nvar COLON = 58;\nvar A = 97;\nvar Z = 122;\n\nvar CONTENT_TYPE_RE = /^multipart\\/(?:form-data|related)(?:;|$)/i;\nvar CONTENT_TYPE_PARAM_RE = /;\\s*([^=]+)=(?:\"([^\"]+)\"|([^;]+))/gi;\nvar FILE_EXT_RE = /(\\.[_\\-a-zA-Z0-9]{0,16}).*/;\nvar LAST_BOUNDARY_SUFFIX_LEN = 4; // --\\r\\n\n\n// replace base64 characters with safe-for-filename characters\nvar b64Safe = {'/': '_', '+': '-'};\n\nexports.Form = Form;\n\nutil.inherits(Form, stream.Writable);\nfunction Form(options) {\n  var self = this;\n  stream.Writable.call(self);\n\n  options = options || {};\n\n  self.error = null;\n\n  self.autoFields = !!options.autoFields;\n  self.autoFiles = !!options.autoFiles;\n\n  self.maxFields = options.maxFields || 1000;\n  self.maxFieldsSize = options.maxFieldsSize || 2 * 1024 * 1024;\n  self.maxFilesSize = options.maxFilesSize || Infinity;\n  self.uploadDir = options.uploadDir || os.tmpdir();\n  self.encoding = options.encoding || 'utf8';\n\n  self.bytesReceived = 0;\n  self.bytesExpected = null;\n\n  self.openedFiles = [];\n  self.totalFieldSize = 0;\n  self.totalFieldCount = 0;\n  self.totalFileSize = 0;\n  self.flushing = 0;\n\n  self.backpressure = false;\n  self.writeCbs = [];\n\n  self.emitQueue = [];\n\n  self.on('newListener', function(eventName) {\n    if (eventName === 'file') {\n      self.autoFiles = true;\n    } else if (eventName === 'field') {\n      self.autoFields = true;\n    }\n  });\n}\n\nForm.prototype.parse = function(req, cb) {\n  var called = false;\n  var self = this;\n  var waitend = true;\n\n  if (cb) {\n    // if the user supplies a callback, this implies autoFields and autoFiles\n    self.autoFields = true;\n    self.autoFiles = true;\n\n    // wait for request to end before calling cb\n    var end = function (done) {\n      if (called) return;\n\n      called = true;\n\n      // wait for req events to fire\n      process.nextTick(function() {\n        if (waitend && req.readable) {\n          // dump rest of request\n          req.resume();\n          req.once('end', done);\n          return;\n        }\n\n        done();\n      });\n    };\n\n    var fields = {};\n    var files = {};\n    self.on('error', function(err) {\n      end(function() {\n        cb(err);\n      });\n    });\n    self.on('field', function(name, value) {\n      var fieldsArray = fields[name] || (fields[name] = []);\n      fieldsArray.push(value);\n    });\n    self.on('file', function(name, file) {\n      var filesArray = files[name] || (files[name] = []);\n      filesArray.push(file);\n    });\n    self.on('close', function() {\n      end(function() {\n        cb(null, fields, files);\n      });\n    });\n  }\n\n  self.handleError = handleError;\n  self.bytesExpected = getBytesExpected(req.headers);\n\n  req.on('end', onReqEnd);\n  req.on('error', function(err) {\n    waitend = false;\n    handleError(err);\n  });\n  req.on('aborted', onReqAborted);\n\n  var state = req._readableState;\n  if (req._decoder || (state && (state.encoding || state.decoder))) {\n    // this is a binary protocol\n    // if an encoding is set, input is likely corrupted\n    validationError(new Error('request encoding must not be set'));\n    return;\n  }\n\n  var contentType = req.headers['content-type'];\n  if (!contentType) {\n    validationError(createError(415, 'missing content-type header'));\n    return;\n  }\n\n  var m = CONTENT_TYPE_RE.exec(contentType);\n  if (!m) {\n    validationError(createError(415, 'unsupported content-type'));\n    return;\n  }\n\n  var boundary;\n  CONTENT_TYPE_PARAM_RE.lastIndex = m.index + m[0].length - 1;\n  while ((m = CONTENT_TYPE_PARAM_RE.exec(contentType))) {\n    if (m[1].toLowerCase() !== 'boundary') continue;\n    boundary = m[2] || m[3];\n    break;\n  }\n\n  if (!boundary) {\n    validationError(createError(400, 'content-type missing boundary'));\n    return;\n  }\n\n  setUpParser(self, boundary);\n  req.pipe(self);\n\n  function onReqAborted() {\n    waitend = false;\n    self.emit('aborted');\n    handleError(new Error(\"Request aborted\"));\n  }\n\n  function onReqEnd() {\n    waitend = false;\n  }\n\n  function handleError(err) {\n    var first = !self.error;\n    if (first) {\n      self.error = err;\n      req.removeListener('aborted', onReqAborted);\n      req.removeListener('end', onReqEnd);\n      if (self.destStream) {\n        errorEventQueue(self, self.destStream, err);\n      }\n    }\n\n    cleanupOpenFiles(self);\n\n    if (first) {\n      self.emit('error', err);\n    }\n  }\n\n  function validationError(err) {\n    // handle error on next tick for event listeners to attach\n    process.nextTick(handleError.bind(null, err))\n  }\n};\n\nForm.prototype._write = function(buffer, encoding, cb) {\n  if (this.error) return;\n\n  var self = this;\n  var i = 0;\n  var len = buffer.length;\n  var prevIndex = self.index;\n  var index = self.index;\n  var state = self.state;\n  var lookbehind = self.lookbehind;\n  var boundary = self.boundary;\n  var boundaryChars = self.boundaryChars;\n  var boundaryLength = self.boundary.length;\n  var boundaryEnd = boundaryLength - 1;\n  var bufferLength = buffer.length;\n  var c;\n  var cl;\n\n  for (i = 0; i < len; i++) {\n    c = buffer[i];\n    switch (state) {\n      case START:\n        index = 0;\n        state = START_BOUNDARY;\n        /* falls through */\n      case START_BOUNDARY:\n        if (index === boundaryLength - 2 && c === HYPHEN) {\n          index = 1;\n          state = CLOSE_BOUNDARY;\n          break;\n        } else if (index === boundaryLength - 2) {\n          if (c !== CR) return self.handleError(createError(400, 'Expected CR Received ' + c));\n          index++;\n          break;\n        } else if (index === boundaryLength - 1) {\n          if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n          index = 0;\n          self.onParsePartBegin();\n          state = HEADER_FIELD_START;\n          break;\n        }\n\n        if (c !== boundary[index+2]) index = -2;\n        if (c === boundary[index+2]) index++;\n        break;\n      case HEADER_FIELD_START:\n        state = HEADER_FIELD;\n        self.headerFieldMark = i;\n        index = 0;\n        /* falls through */\n      case HEADER_FIELD:\n        if (c === CR) {\n          self.headerFieldMark = null;\n          state = HEADERS_ALMOST_DONE;\n          break;\n        }\n\n        index++;\n        if (c === HYPHEN) break;\n\n        if (c === COLON) {\n          if (index === 1) {\n            // empty header field\n            self.handleError(createError(400, 'Empty header field'));\n            return;\n          }\n          self.onParseHeaderField(buffer.slice(self.headerFieldMark, i));\n          self.headerFieldMark = null;\n          state = HEADER_VALUE_START;\n          break;\n        }\n\n        cl = lower(c);\n        if (cl < A || cl > Z) {\n          self.handleError(createError(400, 'Expected alphabetic character, received ' + c));\n          return;\n        }\n        break;\n      case HEADER_VALUE_START:\n        if (c === SPACE) break;\n\n        self.headerValueMark = i;\n        state = HEADER_VALUE;\n        /* falls through */\n      case HEADER_VALUE:\n        if (c === CR) {\n          self.onParseHeaderValue(buffer.slice(self.headerValueMark, i));\n          self.headerValueMark = null;\n          self.onParseHeaderEnd();\n          state = HEADER_VALUE_ALMOST_DONE;\n        }\n        break;\n      case HEADER_VALUE_ALMOST_DONE:\n        if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n        state = HEADER_FIELD_START;\n        break;\n      case HEADERS_ALMOST_DONE:\n        if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n        var err = self.onParseHeadersEnd(i + 1);\n        if (err) return self.handleError(err);\n        state = PART_DATA_START;\n        break;\n      case PART_DATA_START:\n        state = PART_DATA;\n        self.partDataMark = i;\n        /* falls through */\n      case PART_DATA:\n        prevIndex = index;\n\n        if (index === 0) {\n          // boyer-moore derrived algorithm to safely skip non-boundary data\n          i += boundaryEnd;\n          while (i < bufferLength && !(buffer[i] in boundaryChars)) {\n            i += boundaryLength;\n          }\n          i -= boundaryEnd;\n          c = buffer[i];\n        }\n\n        if (index < boundaryLength) {\n          if (boundary[index] === c) {\n            if (index === 0) {\n              self.onParsePartData(buffer.slice(self.partDataMark, i));\n              self.partDataMark = null;\n            }\n            index++;\n          } else {\n            index = 0;\n          }\n        } else if (index === boundaryLength) {\n          index++;\n          if (c === CR) {\n            // CR = part boundary\n            self.partBoundaryFlag = true;\n          } else if (c === HYPHEN) {\n            index = 1;\n            state = CLOSE_BOUNDARY;\n            break;\n          } else {\n            index = 0;\n          }\n        } else if (index - 1 === boundaryLength)  {\n          if (self.partBoundaryFlag) {\n            index = 0;\n            if (c === LF) {\n              self.partBoundaryFlag = false;\n              self.onParsePartEnd();\n              self.onParsePartBegin();\n              state = HEADER_FIELD_START;\n              break;\n            }\n          } else {\n            index = 0;\n          }\n        }\n\n        if (index > 0) {\n          // when matching a possible boundary, keep a lookbehind reference\n          // in case it turns out to be a false lead\n          lookbehind[index-1] = c;\n        } else if (prevIndex > 0) {\n          // if our boundary turned out to be rubbish, the captured lookbehind\n          // belongs to partData\n          self.onParsePartData(lookbehind.slice(0, prevIndex));\n          prevIndex = 0;\n          self.partDataMark = i;\n\n          // reconsider the current character even so it interrupted the sequence\n          // it could be the beginning of a new sequence\n          i--;\n        }\n\n        break;\n      case CLOSE_BOUNDARY:\n        if (c !== HYPHEN) return self.handleError(createError(400, 'Expected HYPHEN Received ' + c));\n        if (index === 1) {\n          self.onParsePartEnd();\n          state = END;\n        } else if (index > 1) {\n          return self.handleError(new Error(\"Parser has invalid state.\"));\n        }\n        index++;\n        break;\n      case END:\n        break;\n      default:\n        self.handleError(new Error(\"Parser has invalid state.\"));\n        return;\n    }\n  }\n\n  if (self.headerFieldMark != null) {\n    self.onParseHeaderField(buffer.slice(self.headerFieldMark));\n    self.headerFieldMark = 0;\n  }\n  if (self.headerValueMark != null) {\n    self.onParseHeaderValue(buffer.slice(self.headerValueMark));\n    self.headerValueMark = 0;\n  }\n  if (self.partDataMark != null) {\n    self.onParsePartData(buffer.slice(self.partDataMark));\n    self.partDataMark = 0;\n  }\n\n  self.index = index;\n  self.state = state;\n\n  self.bytesReceived += buffer.length;\n  self.emit('progress', self.bytesReceived, self.bytesExpected);\n\n  if (self.backpressure) {\n    self.writeCbs.push(cb);\n  } else {\n    cb();\n  }\n};\n\nForm.prototype.onParsePartBegin = function() {\n  clearPartVars(this);\n}\n\nForm.prototype.onParseHeaderField = function(b) {\n  this.headerField += this.headerFieldDecoder.write(b);\n}\n\nForm.prototype.onParseHeaderValue = function(b) {\n  this.headerValue += this.headerValueDecoder.write(b);\n}\n\nForm.prototype.onParseHeaderEnd = function() {\n  this.headerField = this.headerField.toLowerCase();\n  this.partHeaders[this.headerField] = this.headerValue;\n\n  var m;\n  if (this.headerField === 'content-disposition') {\n    if (m = this.headerValue.match(/\\bname=\"([^\"]+)\"/i)) {\n      this.partName = m[1];\n    }\n    this.partFilename = parseFilename(this.headerValue);\n  } else if (this.headerField === 'content-transfer-encoding') {\n    this.partTransferEncoding = this.headerValue.toLowerCase();\n  }\n\n  this.headerFieldDecoder = new StringDecoder(this.encoding);\n  this.headerField = '';\n  this.headerValueDecoder = new StringDecoder(this.encoding);\n  this.headerValue = '';\n}\n\nForm.prototype.onParsePartData = function(b) {\n  if (this.partTransferEncoding === 'base64') {\n    this.backpressure = ! this.destStream.write(b.toString('ascii'), 'base64');\n  } else {\n    this.backpressure = ! this.destStream.write(b);\n  }\n}\n\nForm.prototype.onParsePartEnd = function() {\n  if (this.destStream) {\n    flushWriteCbs(this);\n    var s = this.destStream;\n    process.nextTick(function() {\n      s.end();\n    });\n  }\n  clearPartVars(this);\n}\n\nForm.prototype.onParseHeadersEnd = function(offset) {\n  var self = this;\n  switch(self.partTransferEncoding){\n    case 'binary':\n    case '7bit':\n    case '8bit':\n    self.partTransferEncoding = 'binary';\n    break;\n\n    case 'base64': break;\n    default:\n    return createError(400, 'unknown transfer-encoding: ' + self.partTransferEncoding);\n  }\n\n  self.totalFieldCount += 1;\n  if (self.totalFieldCount > self.maxFields) {\n    return createError(413, 'maxFields ' + self.maxFields + ' exceeded.');\n  }\n\n  self.destStream = new stream.PassThrough();\n  self.destStream.on('drain', function() {\n    flushWriteCbs(self);\n  });\n  self.destStream.headers = self.partHeaders;\n  self.destStream.name = self.partName;\n  self.destStream.filename = self.partFilename;\n  self.destStream.byteOffset = self.bytesReceived + offset;\n  var partContentLength = self.destStream.headers['content-length'];\n  self.destStream.byteCount = partContentLength ? parseInt(partContentLength, 10) :\n    self.bytesExpected ? (self.bytesExpected - self.destStream.byteOffset -\n      self.boundary.length - LAST_BOUNDARY_SUFFIX_LEN) :\n    undefined;\n\n  if (self.destStream.filename == null && self.autoFields) {\n    handleField(self, self.destStream);\n  } else if (self.destStream.filename != null && self.autoFiles) {\n    handleFile(self, self.destStream);\n  } else {\n    handlePart(self, self.destStream);\n  }\n}\n\nfunction flushWriteCbs(self) {\n  self.writeCbs.forEach(function(cb) {\n    process.nextTick(cb);\n  });\n  self.writeCbs = [];\n  self.backpressure = false;\n}\n\nfunction getBytesExpected(headers) {\n  var contentLength = headers['content-length'];\n  if (contentLength) {\n    return parseInt(contentLength, 10);\n  } else if (headers['transfer-encoding'] == null) {\n    return 0;\n  } else {\n    return null;\n  }\n}\n\nfunction beginFlush(self) {\n  self.flushing += 1;\n}\n\nfunction endFlush(self) {\n  self.flushing -= 1;\n\n  if (self.flushing < 0) {\n    // if this happens this is a critical bug in multiparty and this stack trace\n    // will help us figure it out.\n    self.handleError(new Error(\"unexpected endFlush\"));\n    return;\n  }\n\n  maybeClose(self);\n}\n\nfunction maybeClose(self) {\n  if (self.flushing > 0 || self.error) return;\n\n  // go through the emit queue in case any field, file, or part events are\n  // waiting to be emitted\n  holdEmitQueue(self)(function() {\n    // nextTick because the user is listening to part 'end' events and we are\n    // using part 'end' events to decide when to emit 'close'. we add our 'end'\n    // handler before the user gets a chance to add theirs. So we make sure\n    // their 'end' event fires before we emit the 'close' event.\n    // this is covered by test/standalone/test-issue-36\n    process.nextTick(function() {\n      self.emit('close');\n    });\n  });\n}\n\nfunction cleanupOpenFiles(self) {\n  self.openedFiles.forEach(function(internalFile) {\n    // since fd slicer autoClose is true, destroying the only write stream\n    // is guaranteed by the API to close the fd\n    internalFile.ws.destroy();\n\n    fs.unlink(internalFile.publicFile.path, function(err) {\n      if (err) self.handleError(err);\n    });\n  });\n  self.openedFiles = [];\n}\n\nfunction holdEmitQueue(self, eventEmitter) {\n  var item = {cb: null, ee: eventEmitter, err: null};\n  self.emitQueue.push(item);\n  return function(cb) {\n    item.cb = cb;\n    flushEmitQueue(self);\n  };\n}\n\nfunction errorEventQueue(self, eventEmitter, err) {\n  var items = self.emitQueue.filter(function (item) {\n    return item.ee === eventEmitter;\n  });\n\n  if (items.length === 0) {\n    eventEmitter.emit('error', err);\n    return;\n  }\n\n  items.forEach(function (item) {\n    item.err = err;\n  });\n}\n\nfunction flushEmitQueue(self) {\n  while (self.emitQueue.length > 0 && self.emitQueue[0].cb) {\n    var item = self.emitQueue.shift();\n\n    // invoke the callback\n    item.cb();\n\n    if (item.err) {\n      // emit the delayed error\n      item.ee.emit('error', item.err);\n    }\n  }\n}\n\nfunction handlePart(self, partStream) {\n  beginFlush(self);\n  var emitAndReleaseHold = holdEmitQueue(self, partStream);\n  partStream.on('end', function() {\n    endFlush(self);\n  });\n  emitAndReleaseHold(function() {\n    self.emit('part', partStream);\n  });\n}\n\nfunction handleFile(self, fileStream) {\n  if (self.error) return;\n  var publicFile = {\n    fieldName: fileStream.name,\n    originalFilename: fileStream.filename,\n    path: uploadPath(self.uploadDir, fileStream.filename),\n    headers: fileStream.headers,\n    size: 0,\n  };\n  var internalFile = {\n    publicFile: publicFile,\n    ws: null,\n  };\n  beginFlush(self); // flush to write stream\n  var emitAndReleaseHold = holdEmitQueue(self, fileStream);\n  fileStream.on('error', function(err) {\n    self.handleError(err);\n  });\n  fs.open(publicFile.path, 'wx', function(err, fd) {\n    if (err) return self.handleError(err);\n    var slicer = fdSlicer.createFromFd(fd, {autoClose: true});\n\n    // end option here guarantees that no more than that amount will be written\n    // or else an error will be emitted\n    internalFile.ws = slicer.createWriteStream({end: self.maxFilesSize - self.totalFileSize});\n\n    // if an error ocurred while we were waiting for fs.open we handle that\n    // cleanup now\n    self.openedFiles.push(internalFile);\n    if (self.error) return cleanupOpenFiles(self);\n\n    var prevByteCount = 0;\n    internalFile.ws.on('error', function(err) {\n      if (err.code === 'ETOOBIG') {\n        err = createError(413, err.message);\n        err.code = 'ETOOBIG';\n      }\n      self.handleError(err);\n    });\n    internalFile.ws.on('progress', function() {\n      publicFile.size = internalFile.ws.bytesWritten;\n      var delta = publicFile.size - prevByteCount;\n      self.totalFileSize += delta;\n      prevByteCount = publicFile.size;\n    });\n    slicer.on('close', function() {\n      if (self.error) return;\n      emitAndReleaseHold(function() {\n        self.emit('file', fileStream.name, publicFile);\n      });\n      endFlush(self);\n    });\n    fileStream.pipe(internalFile.ws);\n  });\n}\n\nfunction handleField(self, fieldStream) {\n  var value = '';\n  var decoder = new StringDecoder(self.encoding);\n\n  beginFlush(self);\n  var emitAndReleaseHold = holdEmitQueue(self, fieldStream);\n  fieldStream.on('error', function(err) {\n    self.handleError(err);\n  });\n  fieldStream.on('readable', function() {\n    var buffer = fieldStream.read();\n    if (!buffer) return;\n\n    self.totalFieldSize += buffer.length;\n    if (self.totalFieldSize > self.maxFieldsSize) {\n      self.handleError(createError(413, 'maxFieldsSize ' + self.maxFieldsSize + ' exceeded'));\n      return;\n    }\n    value += decoder.write(buffer);\n  });\n\n  fieldStream.on('end', function() {\n    emitAndReleaseHold(function() {\n      self.emit('field', fieldStream.name, value);\n    });\n    endFlush(self);\n  });\n}\n\nfunction clearPartVars(self) {\n  self.partHeaders = {};\n  self.partName = null;\n  self.partFilename = null;\n  self.partTransferEncoding = 'binary';\n  self.destStream = null;\n\n  self.headerFieldDecoder = new StringDecoder(self.encoding);\n  self.headerField = \"\";\n  self.headerValueDecoder = new StringDecoder(self.encoding);\n  self.headerValue = \"\";\n}\n\nfunction setUpParser(self, boundary) {\n  self.boundary = new Buffer(boundary.length + 4);\n  self.boundary.write('\\r\\n--', 0, boundary.length + 4, 'ascii');\n  self.boundary.write(boundary, 4, boundary.length, 'ascii');\n  self.lookbehind = new Buffer(self.boundary.length + 8);\n  self.state = START;\n  self.boundaryChars = {};\n  for (var i = 0; i < self.boundary.length; i++) {\n    self.boundaryChars[self.boundary[i]] = true;\n  }\n\n  self.index = null;\n  self.partBoundaryFlag = false;\n\n  beginFlush(self);\n  self.on('finish', function() {\n    if (self.state !== END) {\n      self.handleError(createError(400, 'stream ended unexpectedly'));\n    }\n    endFlush(self);\n  });\n}\n\nfunction uploadPath(baseDir, filename) {\n  var ext = path.extname(filename).replace(FILE_EXT_RE, '$1');\n  var name = randoString(18) + ext;\n  return path.join(baseDir, name);\n}\n\nfunction randoString(size) {\n  return rando(size).toString('base64').replace(/[\\/\\+]/g, function(x) {\n    return b64Safe[x];\n  });\n}\n\nfunction rando(size) {\n  try {\n    return crypto.randomBytes(size);\n  } catch (err) {\n    return crypto.pseudoRandomBytes(size);\n  }\n}\n\nfunction parseFilename(headerValue) {\n  var m = headerValue.match(/\\bfilename=\"(.*?)\"($|; )/i);\n  if (!m) {\n    m = headerValue.match(/\\bfilename\\*=utf-8\\'\\'(.*?)($|; )/i);\n    if (m) {\n      m[1] = decodeURI(m[1]);\n    }\n    else {\n      return;\n    }\n  }\n\n  var filename = m[1];\n  filename = filename.replace(/%22|\\\\\"/g, '\"');\n  filename = filename.replace(/&#([\\d]{4});/g, function(m, code) {\n    return String.fromCharCode(code);\n  });\n  return filename.substr(filename.lastIndexOf('\\\\') + 1);\n}\n\nfunction lower(c) {\n  return c | 0x20;\n}\n\nfunction createError(status, message) {\n  var error = new Error(message);\n  Error.captureStackTrace(error, createError);\n  error.status = status;\n  error.statusCode = status;\n  return error;\n}\n"}